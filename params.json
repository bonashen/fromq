{"name":"Fromq","tagline":"support collection operator like linq function in javascript","body":"# fromq\r\nfromq.js 是实现javascript环境中linq方法的一种实现。对数组内的对象进行each,where,select,orderby, groupby,count,max,min,sum,avg等操作，同时适用则表达式的匹配操作。\r\n该项目是在[JSLINQ](http://jslinq.codeplex.com/)基础上扩展而来，代码已经重新修改，使[JSLINQ](http://jslinq.codeplex.com/)支持Lambda,正则表达式,字符串的操作，增加了集合的操作except、intersect、union、join、all、any、some、indexOf、contains、sum、avg.\r\n除统计功能函数外，其他的函数都支持链式调用。即如下面代码：\r\n```javascript\r\nrequire([\"your path/fromq.js\"],function(fromq){\r\n    console.log(fromq(\"1,2,3,4,5\").each(function(item){\r\n        console.log(item);\r\n    }).sum());\r\n});\r\n```\r\n下面的样例代码一般省略require部分，除非有其他引用时，会增加require部分，以求代码的可读性。\r\n如果想了解lambda相关的知识，请移步这里:\r\n      [JavaScript Lambda 编译器实现](http://www.bonashen.com/post/develop/ria-develop/2015-04-08-javascript-lambda-bian-yi-qi-shi-xian)\r\n      [JavaScript与Lambda](http://www.bonashen.com/post/develop/ria-develop/2015-04-08-javascriptyu-lambda)\r\n      \r\n本篇只是对fromq.js的各功能调用进行说明与举例。fromq.js源代码已经放置在github上，需要fromq.js源代码请[移步这里](https://github.com/bonashen/fromq).\r\n\r\n相关的使用方法，请关注[我的博客,http://www.bonashen.com](http://www.bonashen.com)。\r\n\r\n---\r\n\r\n### 1.字符串分隔\r\nfromq的字符串的默认分隔符为\"**,**\".\r\n```javascript\r\n    fromq(\"1,2,3,4,5\").each(function(item){\r\n        console.log(item);\r\n    });\r\n```\r\n```javascript\r\n\tfromq(\"1,2,3,4,5\",\",\").each(function(item){   //指定分隔符,\r\n        console.log(item);\r\n    });\r\n```\r\n---\r\n\r\n### 2.数组操作\r\n#### 2.1 常用操作\r\n##### let\r\n调用格式：`let(/*Object*/value);`\r\n功能描述：提供fromq后缀方法中的访问外部的引用。详见 [fromq.let功能使用](http://www.bonashen.com/post/develop/ria-develop/2015-04-28-fromq.letgong-neng-shi-yong)。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq(\"1,2,3\").let(2).where(\"(o,i,v)=>o>=v\");//[2,3]\r\n\r\nfromq(\"1,2,3\").let({value:2}).where(\"(o,i,v)=>o>=v.value\");//[2,3]\r\n\r\nfromq(\"1,2,3\").let(2).where(\"(o,i,v)=>o>v\").select(\"(o,i,v)=>o*v\"); //[6]\r\n```\r\n\r\n##### each | forEach\r\n调用格式：`each(/*function|Lambda*/callback=function(/*object*/item,/*Number*/index){return true;})`\r\n功能描述：遍历所有的数组元素，直到callback返回值非null | undefined终止.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1, 2, 3]).each(function (item, index) {\r\n        console.log('index at:', index, '\\tvalue is:', item);\r\n});\r\nfromq([1, 2, 3]).each(\"(item, index) =>console.log('index at:', index, '\\tvalue is:', item)\");\r\nfromq([1, 2, 3]).let({value:3,log:console.log}).each(\"(o, i,n) =>n.log('index at:', i, '\\tvalue is:', o,'\\t'+o+'*'+n.value+'=',n.value*o)\");\r\n```\r\n---\r\n\r\n##### select | map\r\n调用格式：`select(/*Function|Lambda|String fields*/clause=function(/*Object*/item,/*Number*/index){return {};})`\r\n功能描述：遍历所有的数组元素，将clause()返回值作为数组元素重新组织为新数组并返回新的fromq.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3,4,5,6])\r\n    .select(function(item,index){\r\n        return {index:index,value:item};\r\n        });\r\n        \r\nfromq([1,2,3,4,5,6])\r\n    .select(\"(o,i)=>{index:i,value:o}\");\r\n```\r\n```javascript\r\n//many feilds select example\r\nvar log=fromq(\"o=>console.log(o)\",true);\r\nfromq([1,2,3,4,5,6])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(log)\r\n    .select(\"index,value\")\r\n    .each(log)\r\n    .select(\"value\")\r\n    .each(log);\r\n```\r\n---\r\n\r\n##### where | filter\r\n调用格式：`where(/*Function|Lambda*/clause=function(/*Object*/item,/*Number*/index){})`\r\n功能描述：遍历所有的数据元素，将clause()返回值为true的数组元素重新组织为新数组并返回新的fromq.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\n fromq([1,2,3,4,5,6])\r\n    .where(function(item){\r\n        return item<5\r\n        })\r\n     .each(function(item){  \r\n            console.log(item);\r\n    });\r\nfromq([1,2,3,4,5,6])\r\n    .where(\"o=>o<5\")\r\n    .each(\"o=>console.log(o)\");\r\nfromq([1,2,3,4,5,6])\r\n    .let(5)\r\n    .where(\"(o,i,n)=>o<n\")\r\n    let(console.log)\r\n    .each(\"(o,i,log)=>log(o)\");\r\n```\r\n---\r\n\r\n##### concat\r\n调用格式：`concat(/*Array|formq*/it)`\r\n功能描述：将原数组元素与需连接数组**it**或者**it.toArray()**进行数组连接操作并返回新的fromq，对原数组没有影响.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3])\r\n    .concat([2,3,4])\r\n    .each(function(item){  \r\n        console.log(item);\r\n    });\r\n    \r\nfromq([1,2,3])\r\n    .concat(fromq([2,3,4]))\r\n    .each(function(item){  \r\n        console.log(item);\r\n    });    \r\n```\r\n---\r\n\r\n##### toArray\r\n调用格式：`toArray(/*Array*/it,/*boolean*/overwrite)`\r\n功能描述：若it是数组时，默认清空it数组，并将当前数组数据追加至it数组中，并返回fromq内部数组引用.\r\n- 若overwrite为false,不清空it数组，直接将当前数组数据追加至it数组中。\r\n\r\n返回结果：Array|null\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).concat([2,3,4]).toArray();    \r\n```\r\n---\r\n\r\n##### distinct\r\n调用格式：`distinct(/*Function|Lambda|String field*/clause=function(item,index){}, /*boolean*/distinctValue)`\r\n功能描述：遍历数组，依据clause()返回值作为数组元素唯一性判断，过滤重复项元素，重新组织并返回fromq.\r\n- 若clause为空时，以数组元素作为唯一性判断依据。\r\n- 若distinctValue为true时，clause()返回值作为新fromq的数组元素。\r\n\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3,4,2,3]).distinct();    \r\n    fromq([1,2,3,4,2,3]).distinct(function(item){return item;});\r\n    fromq([1,2,3,4,2,3]).distinct(\"o=>o\");\r\n    fromq([1,2,3,4,2,3]).distinct(\"o=>o*2\",true);\r\n```\r\n---\r\n\r\n#### 2.2 数组及元素检测\r\n##### isEmpty\r\n调用格式：`isEmpty();`\r\n功能描述：检测数组是否为空，若空为true。\r\n返回结果：false|true\r\n调用样例:\r\n```javascript\r\n    if(fromq([1,2,3]).isEmpty()){\r\n        console.log('The array is empty.');\r\n        }\r\n```\r\n---\r\n\r\n##### all|every\r\n调用格式：`all(clause=function(/*Object*/item,/*Number*/index){});`\r\n功能描述：检测数组所有元素是否满足clause条件，都满足为true。\r\n返回结果：false|true\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).all(function(item,index){return item<=3});    \r\n```\r\n---\r\n\r\n##### any|some\r\n调用格式：`all(clause=function(/*Object*/item,/*Number*/index){});`\r\n功能描述：检测数组是否有满足clause条件的元素，有为true。\r\n返回结果：false|true\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).all(function(item,index){return item<=3});    \r\n```\r\n---\r\n\r\n##### contains\r\n调用格式：`contains(/*Function|Lambda|value*/clause=function(/*Object*/item,/*Number*/index){});`\r\n功能描述：检测数组是否有满足clause的元素，有为true\r\n返回结果：false|true\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).contains(function(item,index){return item<=3});    \r\n```\r\n---\r\n\r\n#### 2.3 定位数组元素\r\n##### indexOf\r\n调用格式：`indexOf(/*Function|Lambda|value*/clause=function(/*Object*/item,/*Number*/index){});`\r\n功能描述：检索数组满足clause条件第一个元素的位置，没有则返回-1.\r\n返回结果：Number\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).indexOf(function(item,index){return item<=3});    \r\n    fromq([1,2,3]).indexOf(3);\r\n    fromq([1,2,3]).indexOf(\"o=>o==3\"); \r\n    fromq([1,2,3]).let(3).indexOf(\"(o,i,n)=>o==n\");    \r\n```\r\n---\r\n\r\n##### first | head\r\n调用格式：`first(/*Function|Lambda*/clause=function(/*Object*/item,/*Number*/index){});`\r\n功能描述：检索数组满足clause条件第一位元素，没有则返回null.\r\n- 若clause为空时，则返回数组第一位元素。\r\n\r\n返回结果：object|null\r\n\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).first();  \r\n    fromq([1,2,3]).first(function(item,index){return item<=3});    \r\n    fromq([1,2,3]).first(\"o=>o<=3\");  \r\n    fromq([1,2,3]).let({value:3}).first(\"(o,i,n)=>o<=n.value\");\r\n```\r\n---\r\n\r\n##### firstOrDefault | headOrDefault\r\n调用格式：`firstOrDefault(/*Function|Lambda*/clause=function(/*Object*/item,/*Number*/index){},defaultValue);`\r\n功能描述：检索数组满足clause条件第一位元素，没有则返回defaultValue.\r\n返回结果：object|defaultValue\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).firstOrDefault(function(item,index){return item>4},4);    \r\n    fromq([1,2,3]).firstOrDefault(\"o=>o>4\",4);    \r\n    fromq([1,2,3]).let({value:4}).firstOrDefault(\"(o,i,n)=>o>n.value\",4);\r\n```\r\n---\r\n\r\n##### last | tail\r\n调用格式：`last(/*Function|Lambda*/clause=function(/*Object*/item,/*Number*/index){});`\r\n功能描述：检索数组满足clause条件末位元素，没有则返回null.\r\n返回结果：object|null\r\n调用样例:\r\n```javascript\r\n    fromq([1,2,3]).last(function(item,index){return item<=3});    \r\n    fromq([1,2,3]).last(\"o=>o<=3\");  \r\n    fromq([1,2,3]).let({value:3}).last(\"(o,i,n)=>o<=n.value\");\r\n```\r\n---\r\n\r\n##### lastOrDefault | tailOrDefault\r\n调用格式：`lastOrDefault(/*Function|Lambda*/clause=function(/*Object*/item,/*Number*/index){},defaultValue);`\r\n功能描述：检索数组满足clause条件末位元素，没有则返回defaultValue.\r\n返回结果：object|defaultValue\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).lastOrDefault(function(item,index){return item>4},4);    \r\nfromq([1,2,3]).lastOrDefault(\"o=>o>4\",4);    \r\nfromq([1,2,3]).let({value:4}).lastOrDefault(\"(o,i,n)=>o>n.value\",4);\r\n```\r\n---\r\n\r\n##### elementAt\r\n调用格式：`elementAt(/*Number*/index);`\r\n功能描述：取位于index处的数组元素.\r\n返回结果：object\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).elementAt(2);\r\n```\r\n---\r\n\r\n##### elementAtOrDefault\r\n调用格式：`elementAtOrDefault(/*Number*/index,defaultValue);`\r\n功能描述：取位于index处的数组元素,如果index越界返回defaultValue.\r\n返回结果：object|defaultValue\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).elementAtOrDefault(3,4);\r\n```\r\n---\r\n\r\n##### take\r\n调用格式：`take(/*number*/top, /*function|Lambda*/clause=function(item,index){});`\r\n功能描述：依据clause()返回值过滤后,取前top数量的元素,重新组织并返回fromq.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).take(2);\r\nfromq([1,2,3]).take(2,function(item){return item<4});\r\nfromq([1,2,3]).take(2,\"o=>o<4\");\r\nfromq([1,2,3]).let({value:4}).take(2,\"(o,i,n)=>o<n.value\");\r\n```\r\n---\r\n\r\n##### skip\r\n调用格式：`skip(/*number*/count, /*function|Lambda*/clause=function(item,index){});`\r\n功能描述：依据clause()返回值过滤后,从count处开始取剩余的元素，重新组织并返回fromq.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).skip(2);\r\nfromq([1,2,3]).skip(2,function(item){return item<4});\r\nfromq([1,2,3]).skip(2,\"o=>o<4\");\r\nfromq([1,2,3]).let({value:4}).skip(2,\"(o,i,n)=>o<n.value\");\r\n```\r\n---\r\n\r\n##### takeRange\r\n调用格式：`takeRange(/*number*/start,/*number*/end, /*function|Lambda*/clause=function(item,index){});`\r\n功能描述：依据clause()返回值过滤后，取start至end处的数组元素，并重新组织并返回fromq.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).takeRange();//获得同样数组元素的新fromq对象\r\nfromq([1,2,3]).takeRange(2);//获得从2开始后剩余数组元素组成的fromq对象\r\nfromq([1,2,3]).takeRange(2,3);\r\nfromq([1,2,3]).takeRange(2,function(item){return item<4});\r\nfromq([1,2,3]).takeRange(2,\"o=>o<4\");\r\nfromq([1,2,3]).let({value:4}).takeRange(2,\"(o,i,n)=>o<n.value\");\r\n```\r\n---\r\n\r\n##### random\r\n调用格式：`random(/*number*/count);`\r\n功能描述：随机从数组中选择count数量的元素，并重新组织并返回fromq.\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar s = fromq([1,3,6,9]).random(5).toString(\",\");\r\nconsole.log(s);\r\n/* out:\r\n1,3,9,9,6\r\n*/\r\n```\r\n---\r\n\r\n#### 2.4 数组统计\r\n##### size\r\n调用格式：`size();`\r\n功能描述：统计数组元素的数量.\r\n返回结果：Number\r\n调用样例:\r\n```javascript\r\nfromq.utils.random(100,null,1000)\r\n    .let(2)\r\n    .where(\"(o,i,v)=>o%v==0\")\r\n    .size();\r\n```\r\n---\r\n\r\n##### max\r\n调用格式：`max(/*Function|Lambda|String field*/clause=function(item){});`\r\n功能描述：指定列或clause()返回值的最大数的数组元素.\r\n返回结果：object\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).max();//3\r\n\r\nfromq([1,2,3]).max(function(item){return item;});//3\r\nfromq([1,2,3]).max(\"o=>o\");//3\r\n\r\nconsole.log(\"max:\\t\",fromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(\"o=>console.log(o)\")\r\n    .max(\"value\"));//3\r\n```\r\n\r\n  ![Image Title](https://geekpics.net/images/2015/04/29/f5wi18.png)\r\n\r\n---\r\n\r\n##### min\r\n调用格式：`min(/*Function|Lambda|String field*/clause=function(item){});`\r\n功能描述：指定列或clause()返回值的最小数的数组元素.\r\n返回结果：object\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).min();//1\r\n\r\nfromq([1,2,3]).min(function(item){return item;});//1\r\nfromq([1,2,3]).min(\"o=>o\");//1\r\n\r\nconsole.log(\"min:\\t\",fromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(\"o=>console.log(o)\")\r\n    .min(\"value\"));//1\r\n```\r\n---\r\n\r\n##### sum | aggregate\r\n调用格式：`sum(/*Function|Lambda|String fields*/clause=function(item,/*Number*/index));`\r\n功能描述：统计指定列或clause()返回值的和.\r\n返回结果：Number|Float|NaN\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).sum();\r\n\r\nfromq([1,2,3]).sum(function(item){return item;});\r\nfromq([1,2,3]).sum(\"o=>o\");\r\n\r\nconsole.log(\"sum:\\t\",fromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(\"o=>console.log(o)\")\r\n    .sum(\"value\"));\r\n```\r\n---\r\n\r\n##### avg | average\r\n调用格式：`avg(/*Function|Lambda|String fields*/clause=function(item,/*Number*/index));`\r\n功能描述：统计指定列或clause()返回值的平均数.\r\n返回结果：Number|Float|NaN\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).avg();\r\n\r\nfromq([1,2,3]).avg(function(item){return item;});\r\nfromq([1,2,3]).avg(\"o=>o\");\r\n\r\nconsole.log(\"avg:\\t\",fromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(\"o=>console.log(o)\")\r\n    .avg(\"value\"));\r\n```\r\n---\r\n\r\n#### 2.5 排序分页与分组\r\n##### orderBy | sort\r\n调用格式：`orderBy(/*Function|Lambda|String fields*/clause=function(item){},customCompar=false);`\r\n功能描述：依据各数组元素的clause(item)返回值对数组元素进行升序排序。若customCompare为true,侧依据clause(a,b)返回值-1，0，1进行数组元素升序排序。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).orderBy();\r\nfromq([1,2,3]).orderBy(\"o=>o\");  //order by value.\r\nfromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(\"o=>console.log(o)\")\r\n    .orderBy(\"value,index\");   // order by object property value.\r\nfromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .orderBy(function(a,b){    //custom comparer\r\n        return a.value<b.value?-1:a.value>b.value?1:0;  \r\n    },true);\r\n```\r\n---\r\n\r\n##### orderByDescending | orderByDesc\r\n调用格式：`orderByDescending(/*Function|Lambda|String fields*/clause=function(item){},customCompare=false);`\r\n功能描述：依据各数组元素的clause(item)返回值对数组元素进行降序排序。若customCompare为true,侧依据clause(a,b)返回值-1，0，1进行数组元素降序排序。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3]).orderByDescending();\r\nfromq([1,2,3]).orderByDescending(\"o=>o\");  //order by value.\r\nfromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(\"o=>console.log(o)\")\r\n    .orderByDescending(\"value,index\");   // order by object property value.\r\nfromq([1,2,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .orderByDescending(function(a,b){    //custom comparer\r\n        return a.value<b.value?-1:a.value>b.value?1:0;  \r\n    },true);\r\n```\r\n---\r\n\r\n##### paging\r\n调用格式：`paging(/*Number*/nextCount,/*Function|Lambda*/clause=function(item,/*Number*/index){return true});`\r\n功能描述：依据各数组元素的clause(item,index)返回值对数组元素进行过滤后生成fromq，并缓存至paginger中。\r\n返回结果：paginger\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.utils.range(100).paging(4,\"o=>o%21==0\");\r\npaginger\r\n    .each(\"(o,i,log)=>log('page number:',i);o.each('(a,i,log)=>log(a)',log)\",console.log)\r\n    .gotoPage(3).each(\"o=>console.log(o)\");\r\nconsole.log(\"Current Page No:\",paginger.getPageNo());\r\n```\r\n---\r\n\r\n##### groupBy\r\n调用格式：`groupBy(/*Function|Lambda|String fields*/clause=function(item,/*Number*/index){});`\r\n功能描述：依据各数组元素的clause(item,index)返回值对数组元素进行分组。clause(item,index)返回值可以是任何值，若为数组，则进行多层分组。\r\n返回结果：grouped\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3,2,3,3]).\r\n    groupBy(\"o=>o\");  //group by value.\r\nfromq([1,2,3,2,3,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .each(\"o=>console.log(o)\")\r\n    .groupBy(\"value\");   // group by object property value.\r\n\r\n fromq([1,2,3,2,3,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .let({value:2})\r\n    .groupBy(function(item,index,n){ \r\n      return   item.value>n.value?\"value>\"+n.value:\"value<=\"+n.value;\r\n    })\r\n    .select(\"(g,i)=>{group:g,sum:i.sum('value'),count:i.count()}\")\r\n                              //select group object,total each group item value.\r\n    .each('o=>console.log(o)');\r\n    \r\n```\r\n---\r\n##### count|countBy\r\n调用格式：`count(/*Function|Lambda|String fields*/clause=function(item,/*Number*/index){});`\r\n功能描述：依据各数组元素的clause(item,index)返回值对数组元素进行分组计数。clause(item,index)返回值可以是任何值。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1,2,3,2,3,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .let({value:2})\r\n    .countBy(function(item,index,n){ \r\n      return   item.value>n.value?\"value>\"+n.value:\"value<=\"+n.value;\r\n    })\r\n    .each('o=>console.log(o)');\r\n\r\n```\r\n\r\n![Image Title](https://geekpics.net/images/2015/04/29/OYt8.png)\r\n\r\n---\r\n\r\n#### 2.6 集合运算\r\n##### union\r\n调用格式：`union(/*Array|fromq*/second, /*Function|lambda|String FieldName*/clause=function(item,index){return distinct});`\r\n功能描述：依赖clause()返回值作为唯一值，合并两个数组并过滤相同项。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar People1 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" }\r\n    ];\r\nvar People2 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" }\r\n    ];\r\nfromq(People1)\r\n    .union(People2,\r\n    function (item) {\r\n        return item.ID;\r\n    }).each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .union(People2, \"o=>o.ID\")\r\n    .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .union(People2, \"ID\")\r\n    .each(\"o=>console.log(o)\");\r\n```\r\n---\r\n\r\n##### intersect\r\n调用格式：`intersect(/*Array|fromq*/second, /*Function|lambda|String FieldName*/clause=function(item,index){return distinct});`\r\n功能描述：依赖clause()返回值作为唯一值，过滤重复项后，检索两个数组相同项（相交），重新组织为fromq。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar People1 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" }\r\n    ];\r\nvar People2 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" }\r\n    ];\r\nfromq(People1)\r\n    .intersect(People2,\r\n    function (item) {\r\n        return item.ID;\r\n    }).each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .intersect(People2, \"o=>o.ID\")\r\n    .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .intersect(People2, \"ID\")\r\n    .each(\"o=>console.log(o)\");\r\n```\r\n---\r\n\r\n##### except\r\n调用格式：`except(/*Array|fromq*/second, /*Function|lambda|String FieldName*/clause=function(item,index){return distinct});`\r\n功能描述：依赖clause()返回值作为唯一值，过滤重复项后，检索两个数组不相同项（与非），重新组织为fromq。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar People1 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" }\r\n    ];\r\nvar People2 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" }\r\n    ];\r\nfromq(People1)\r\n    .except(People2,\r\n    function (item) {\r\n        return item.ID;\r\n    }).each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .except(People2, \"o=>o.ID\")\r\n    .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .except(People2, \"ID\")\r\n    .each(\"o=>console.log(o)\");\r\n```\r\n---\r\n\r\n##### innerJoin\r\n调用格式：`innerJoin(/*Array|fromq*/second, /*Function|lambda|String fields*/comparer=function(a,b){return true}, /*Function|Lambda*/selector=function(a,b){return {};});`\r\n功能描述：依赖comparer(a,b)返回值判断second集合中是否存在元素a，若存在则将selector(a,b)的返回值作为数组元素,若不存在则不调用selector(a,b)，并将selector(a,b)的值重新组织为fromq。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\n var People1 = \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" },\r\n        { ID: 4, FirstName: \"YingChun\", LastName: \"Xue\" }\r\n    ];\r\nvar People2 =  \r\n    [\r\n        { ID: 1, Age:38 },\r\n        { ID: 3, Age:11 },\r\n        { ID: 2, Age:5 }\r\n    ];\r\nfromq(People1)\r\n    .innerJoin(People2, \"(a,b)=>a.ID==b.ID\",\r\n        \"(a,b)=>{id:a.ID,name:a.FirstName+'  '+a.LastName,age:b.Age}\")\r\n    .orderBy(\"age\")    \r\n    .each(\"o=>console.log(o)\");\r\n```\r\n---\r\n\r\n##### leftJoin\r\n调用格式：`leftJoin(/*Array|fromq*/second, /*Function|lambda|String fields*/comparer=function(a,b){return true}, /*Function|Lambda*/selector=function(a,b){return {};});`\r\n功能描述：依赖comparer(a,b)返回值判断second集合中是否存在元素a，若不存在将b置为空对象`{}`，无论存在与否都将selector(a,b)的返回值作为数组元素重新组织为fromq。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar People1 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" },\r\n        { ID: 4, FirstName: \"YingChun\", LastName: \"Xue\" }\r\n    ];\r\nvar People2 =  \r\n    [\r\n        { ID: 1, Age:38 },\r\n        { ID: 3, Age:11 },\r\n        { ID: 2, Age:5 }\r\n    ];\r\nfromq(People1)\r\n    .leftJoin(People2,\r\n    function (a,b) {\r\n        return a.ID==b.ID;\r\n    },function(a,b){\r\n        return {id:a.ID,name:a.FirstName+\"  \"+a.LastName,age:b.Age};    \r\n    }).each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .leftJoin(People2, \"(a,b)=>a.ID==b.ID\",\r\n        \"(a,b)=>{id:a.ID,name:a.FirstName+'  '+a.LastName,age:b.Age}\")\r\n    .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .leftJoin(People2, \"ID\",\r\n    \"(a,b)=>{id:a.ID,name:a.FirstName+'  '+a.LastName,age:b.Age}\")\r\n    .orderBy(\"age\")    \r\n    .each(\"o=>console.log(o)\");\r\n```\r\n---\r\n##### in | within\r\n调用格式：`in(/*Array|fromq*/second, /*Function|lambda|String field*/distinctClause=function(item,index){return {};});`\r\n功能描述：先对second以distinctClause(item,index)返回值进行唯一选择，再对原数组元素以distinctClause(item,index)返回值作为唯一值判断second唯一集合中是否存在元素相同元素，若**存在**则将item作为数组元素重新组织为fromq。\r\n详细用法请查看[fromq.in fromq.notIn功能用例](http://www.bonashen.com/post/develop/ria-develop/2015-04-24-fromq.in-fromq.notingong-neng)\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar People1 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" },\r\n        { ID: 4, FirstName: \"YingChun\", LastName: \"Xue\" }\r\n    ];\r\nvar People2 =  \r\n    [\r\n       { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" },\r\n    ];\r\nfromq(People1)\r\n    .in(People2,\"ID\")\r\n   .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .in(People2, \"o=>o.ID\")\r\n    .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .in(People2, function(item){return item.ID;})\r\n    .each(\"o=>console.log(o)\");\r\n```\r\n---\r\n##### notIn | without\r\n调用格式：`notIn(/*Array|fromq*/second, /*Function|lambda|String field*/distinctClause=function(item,index){return {};});`\r\n功能描述：先对second以distinctClause(item,index)返回值进行唯一选择，再对原数组元素以distinctClause(item,index)返回值作为唯一值判断second唯一集合中是否存在元素相同元素，若**不存在**则将item作为数组元素重新组织为fromq。\r\n详细用法请查看[fromq.in fromq.notIn功能用例](http://www.bonashen.com/post/develop/ria-develop/2015-04-24-fromq.in-fromq.notingong-neng)\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar People1 =  \r\n    [\r\n        { ID: 1, FirstName: \"Bona\", LastName: \"Shen\" },\r\n        { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" },\r\n        { ID: 4, FirstName: \"YingChun\", LastName: \"Xue\" }\r\n    ];\r\nvar People2 =  \r\n    [\r\n       { ID: 2, FirstName: \"Kerry\", LastName: \"Xue\" },\r\n        { ID: 3, FirstName: \"Peter\", LastName: \"Shen\" },\r\n    ];\r\nfromq(People1)\r\n    .notIn(People2,\"ID\")\r\n   .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .notIn(People2, \"o=>o.ID\")\r\n    .each(\"o=>console.log(o)\");\r\nfromq(People1)\r\n    .notIn(People2, function(item){return item.ID;})\r\n    .each(\"o=>console.log(o)\");\r\n```\r\n---\r\n### 3.数组分组对象(grouped)\r\n分组对象是fromq().groupBy函数的返回结果集。他提供了对分组后的对象进行数组元素的遍历、选择，通过选择功能select你可以实现分组的统计功能。\r\n#### each\r\n调用格式：`each(/*Function|Lambda*/clause=function(/*Object*/group,/*fromq*/items){});`\r\n功能描述：遍历分组对象的数组元素，若clause()返回非null | undefined时结束遍历。\r\n返回结果：grouped\r\n调用样例:\r\n```javascript\r\n//example1\r\nfromq([1,2,3,2,3,3]).\r\n    groupBy(\"o=>o\").\r\n    each(function(group,items){\r\n               console.log(group);   //print group value,also name 'group name'\r\n    });\r\n });\r\n //example2\r\nfromq([1,2,3,2,3,3])\r\n    .select(\"(o,i)=>{index:i,value:o}\")\r\n    .let({value:2})\r\n    .groupBy(\"(o,i,n)=>o.value>n.value?\"value>\"+n.value:\"value<=\"+n.value;\r\n    })\r\n    .select(\"(g,i)=>{group:g,sum:i.sum('value'),count:i.count()}\")\r\n      //分组的统计\r\n    .each('o=>console.log(o)');\r\n```\r\n---\r\n\r\n#### select\r\n调用格式：`select(/*Function|Lambda*/clause=function(/*fromq*/group,/*fromq*/items){});`\r\n功能描述：遍历分组对象的数组元素，重新组织clause()返回值为fromq对象。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1, 2, 3, 2, 3, 3])\r\n    .select('(o,i)=>{index:i,value:o}')\r\n    .let({value:2})    \r\n    .groupBy('(o,i,n)=>o.value>n.value? \"value>\" + n.value: \"value<=\"+ n.value')\r\n    .select('(g,i)=>{group:g,sum:i.sum(\\'value\\'),count:i.count(),items:i.toArray()}')\r\n    .each('o=>console.log(o)');   \r\n```\r\n---\r\n#### count\r\n调用格式：`count();`\r\n功能描述：对各分组的元素数量进行统计,集合分组名为新值对象，重新生成数组，并返回fromq。\r\n值对象的格式如下：\r\n```javascript\r\n{key:'group name' ,value: size}\r\n```\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq([1, 2, 3, 2, 3, 3])\r\n    .select('(o,i)=>{index:i,value:o}')\r\n    .let({value:2})    \r\n    .groupBy('(o,i,n)=>o.value>n.value? \"value>\" + n.value: \"value<=\"+ n.value')\r\n    .count()\r\n    .each('o=>console.log(o)');   \r\n```\r\n---\r\n\r\n#### getCache\r\n调用格式：`getCache();`\r\n功能描述：获取分组对象的数据。\r\n返回结果：object\r\n调用样例:\r\n```javascript\r\nconsole.log(\r\n    fromq([1, 2, 3, 2, 3, 3]).\r\n    groupBy(\"o=>o\").getCache());\r\n\r\n```\r\n---\r\n\r\n### 4.数组分页对象(paginger)\r\n分页对象是fromq().paging函数的返回结果集。他提供对数组元素按页的遍历、选择等fromq功能。\r\n####each\r\n调用格式：`each(/*Function|Lambda*/clause=function(/*fromq\\*rdsq,/*Number*/pageNo){return false});`\r\n功能描述：遍历每一页，若clause()返回非null | undefined时结束遍历。\r\n返回结果：paginger\r\n调用样例:\r\n```javascript\r\nvar log=console.log;\r\nvar paginger = fromq([1,2,3,4,5,6]).paging(3);\r\npaginger.each(function(rdsq,pageNo){\r\n    log(\"Page No:\",pageNo);    \r\n    rdsq.each(function(item,index){\r\n        log(item);\r\n    });\r\n});\r\n\r\n//for lambda\r\npaginger.each(\"(rdsq,i,log)=>log('Page No:',i);rdsq.each('(o,i,log)=>log(o)',log)\",log);\r\n```\r\n---\r\n\r\n#### select\r\n调用格式：`select(/*Function|Lambda*/clause=function(/*fromq*/rdsq,/*Number*/pageNo){});`\r\n功能描述：遍历每一页，按页重新组织clause()返回值为fromq对象。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(5);\r\npaginger.select(function(rdsq,pageNo){\r\n    return {pageNo:pageNo,count:rdsq.count(),sum:rdsq.sum(),avg:rdsq.avg()};\r\n}).each(function(item){\r\n    console.log(item);\r\n});\r\n//for lambda\r\npaginger\r\n    .select(\"(rdsq,pageNo)=>{pageNo:pageNo,count:rdsq.count(),sum:rdsq.sum(),avg:rdsq.avg()}\")\r\n    .each(\"o=> console.log(o)\");\r\n```\r\n---\r\n\r\n#### setNextCount\r\n调用格式：`setNextCount(/*Number*/count);`\r\n功能描述：设置每页的记录数量。\r\n返回结果：null\r\n调用样例:\r\n```javascript\r\npaginger.setNextCount(10);\r\n```\r\n---\r\n\r\n#### pageCount\r\n调用格式：`pageCount();`\r\n功能描述：依据每一页的记录数量与缓存的记录数计算总页数。\r\n返回结果：Number>=0\r\n调用样例:\r\n```javascript\r\nvar pageCount = fromq.range(100).paging(6).pageCount();\r\nconsole.log(\"page count:\",pageCount);\r\n```\r\n---\r\n\r\n#### getPageNo\r\n调用格式：`getPageNo(/*object*/item);`\r\n功能描述：返回item所处页的页码，若item=null | undefined,则返回当前页的页码。\r\n返回结果：Number\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6);\r\npaginger.last();\r\nconsole.log(\"Current Page No:\",paginger.getPageNo());\r\n```\r\n---\r\n\r\n#### isEmpty\r\n调用格式：`isEmpty();`\r\n功能描述：判断Paginger的缓存数据是否为空。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o>100\");\r\nconsole.log(\"Paginger is empty:\",paginger.isEmpty());\r\n```\r\n---\r\n\r\n#### getCache\r\n调用格式：`getCache();`\r\n功能描述：获取Paginger的缓存数据。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%15==0\");\r\nconsole.log(\"Paginger cache records number:\",paginger.getCache().count());\r\n```\r\n---\r\n\r\n#### getCacheCount\r\n调用格式：`getCacheCount();`\r\n功能描述：获取Paginger的缓存数据的数组长度。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%15==0\");\r\nconsole.log(\"Paginger cache records number:\",paginger.getCacheCount());\r\n```\r\n---\r\n\r\n#### gotoPage\r\n调用格式：`gotoPage(/*Number*/pageNumber);`\r\n功能描述：跳转到pageNumber，并获取PageNumber的数据。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger.\r\n    gotoPage(2)\r\n    .each(function(item){\r\n        console.log(\"record no.\",paginger.indexOf(item),\"\\tvalue:\",item);\r\n    });\r\n\r\n```\r\n---\r\n\r\n#### first\r\n调用格式：`first();`\r\n功能描述：跳转到第一页，并获取该页的数据。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger\r\n    .first()\r\n    .each(function(item){\r\n        console.log(\"record no.\",paginger.indexOf(item),\"\\tvalue:\",item);\r\n    });\r\n```\r\n---\r\n\r\n#### last\r\n调用格式：`last();`\r\n功能描述：跳转到末页，并获取该页的数据。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger\r\n    .last()\r\n    .each(function(item){\r\n        console.log(\"record no.\",paginger.indexOf(item),\"\\tvalue:\",item);\r\n    });\r\n```\r\n---\r\n\r\n#### next\r\n调用格式：`next();`\r\n功能描述：移到下一页，并获取该页的数据。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger\r\n    .next()\r\n    .each(function(item){\r\n        console.log(\"record no.\",paginger.indexOf(item),\"\\tvalue:\",item);\r\n    });\r\n```\r\n---\r\n\r\n#### prior\r\n调用格式：`prior();`\r\n功能描述：移到上一页，并获取该页的数据。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger\r\n    .prior()\r\n    .each(function(item){\r\n        console.log(\"record no.\",paginger.indexOf(item),\"\\tvalue:\",item);\r\n    });\r\n```\r\n---\r\n\r\n#### current\r\n调用格式：`current();`\r\n功能描述：获取当前页的数据。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger\r\n    .current()\r\n    .each(function(item){\r\n        console.log(\"record no.\",paginger.indexOf(item),\"\\tvalue:\",item);\r\n    });\r\n```\r\n---\r\n\r\n#### indexOf\r\n调用格式：`indexOf(/*Object*/item);`\r\n功能描述：获取item在Cache中的索引值。\r\n返回结果：Number\r\n- 若返回结果为`-1`，表示item不在Cache中。\r\n\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger\r\n    .last()\r\n    .each(function(item){\r\n        console.log(\"record no.\",paginger.indexOf(item),\"\\tvalue:\",item);\r\n    });\r\n```\r\n---\r\n\r\n#### isTail\r\n调用格式：`isTail();`\r\n功能描述：判断当前页是否是末尾页。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger.next();\r\nconsole.\r\n    log(\"Current Page is tail:\",paginger.isTail());\r\n   \r\n```\r\n---\r\n\r\n#### isTop\r\n调用格式：`isTop();`\r\n功能描述：判断当前页是否是顶页。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nvar paginger = fromq.range(100).paging(6,\"o=>o%3==0\");\r\npaginger.first();\r\nconsole.\r\n    log(\"Current Page is top:\",paginger.isTop());\r\n   \r\n```\r\n---\r\n### 5.正则表达式操作\r\nfromq可以进行正则表达式的匹配操作，主要有两个函数，fromq(RegExp)和match(str)。具体使用详细如下说明。\r\n#### fromq\r\n调用格式：`fromq(/*RegExp*/it,/*String*/str);`\r\n功能描述：使用it对str进行正则表达式匹配，组织匹配结果为fromq对象。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq(/ab*/g,\"abb switch,i like abb\").\r\n    each(\"o=>console.log('value:'+o,'\\t index:'+o.index)\");\r\n```\r\n#### match\r\n调用格式：`match(/*String*/str);`\r\n功能描述：使用fromq对象创建时的it值对str进行正则表达式匹配，组织匹配结果为fromq对象。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq(/ab*/g).match(\"abb switch,i like abb\").\r\n    each(\"o=>console.log('value:'+o,'\\t index:'+o.index)\");\r\n```\r\n---\r\n### 6.Lambda使用\r\n#### fromq | fromq.lambda\r\n调用格式：`fromq(/*String*/it,/*Boolean*/isClosure);`\r\n功能描述：fromq可以将符合Lambda规范的字符串编译为匿名函数。\r\n返回结果：Function\r\n调用样例:\r\n```javascript\r\nfromq(\"o=>console.log(o)\");\r\nfromq.lambda(\"o=>console.log(o)\");\r\nfromq(\"o=>console.log(o)\",true); //带有闭包函数体\r\nfromq.lambda(\"o=>console.log(o)\",true);\r\n```\r\n```javascript\r\n\r\nfromq(\"o=>console.log(o)\").toString();\r\n/*\r\nfunction anonymous(o) {\r\n'use strict';\r\nreturn console.log(o);\r\n}\r\n*/\r\n\r\nfromq(\"o=>console.log(o)\",true).toString();\r\n/*\r\nfunction anonymous(o) {\r\n'use strict';\r\nreturn  (function(o){console.log(o)}).apply(this,arguments);\r\n}\r\n*/\r\n```\r\n---\r\n### 7.其他静态功能(utils)\r\n其他静态功能是指fromq.utils包中的静态方法，可以通过fromq.utils直接引用。\r\n\r\n#### random\r\n调用格式：`random(/*Number*/minValue,/*Number*/maxValue,/*Number*/count);`\r\n功能描述：随机产生minValue-maxValue范围内的count数量的数组，并返回fromq。\r\n\r\n- maxValue为null时，产生0-minValue之间的数值;\r\n- count缺省时，默认为1;\r\n\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nvar s = fromq.utils.random(100,null,5).toString(\",\");\r\nconsole.log(s);\r\n/*out:\r\n43,64,23,32,86\r\n*/\r\n```\r\n#### range\r\n调用格式：`range(/*Number*/start, /*Number*/end, /*Number*/step);`\r\n功能描述：按setp步长生成从start到end的数组元素并返回fromq。\r\n- 若仅有start，则生成0-start个数组元素\r\n- 若仅缺step,则以1为步长\r\n\r\n返回结果：fromq\r\n功能已经有所修缮，详见[【新增fromq.equal,into功能，修缮了range功能】](http://www.bonashen.com/post/develop/ria-develop/2015-04-25-xin-zeng-fromq.equalgong-neng-xiu-shan-liao-rangegong-neng)\r\n\r\n调用样例:\r\n```javascript\r\nfromq\r\n        .utils.range(10)\r\n        .select(\"o=>o*2\")\r\n        .each('o=>console.log(o)');\r\nfromq\r\n        .utils.range(5,10)\r\n        .select(\"o=>o*2\")\r\n        .each('o=>console.log(o)');\r\nfromq\r\n        .utils.range(1,10,2)\r\n        .select(\"o=>o*2\")\r\n        .each('o=>console.log(o)');\r\n```\r\n#### repeat\r\n调用格式：`repeat(/*String*/it, /*Number*/count);`\r\n功能描述：重复生成count数量的it数组元素并返回fromq。\r\n返回结果：fromq\r\n调用样例:\r\n```javascript\r\nfromq\r\n        .utils.repeat(\"a\",4)\r\n        .each('o=>console.log(o)');\r\n/*out:\r\n    aaaa\r\n*/\r\n```\r\n#### trim\r\n调用格式：`trim(/*String*/it);`\r\n功能描述：删除it字符串的前尾空白字符并返回。\r\n返回结果：String\r\n调用样例:\r\n```javascript\r\nvar src = \" a \";\r\nconsole.log(src.length);//3\r\nconsole.log(fromq.utils.trim(src).length);//1\r\n```\r\n#### initialToUpperCase\r\n调用格式：`initialToUpperCase(/*String*/it);`\r\n功能描述：将字符串中首个单词的首字母转为大写字母。\r\n返回结果：String\r\n调用样例:\r\n```javascript\r\nvar src = \" hello world \";\r\nconsole.log(\"'\",src,\"',  length:\",src.length);\r\nvar dsrc = fromq.utils.initialToUpperCase(src);\r\nconsole.log(\"'\",dsrc,\"',  length:\",dsrc.length);\r\n/*out:\r\n' hello world ', length:13\r\n' Hello world ', length:13\r\n*/\r\n```\r\n#### initialsToUpperCase\r\n调用格式：`initialsToUpperCase(/*String*/it);`\r\n功能描述：将字符串中每个单词的首字母转为大写字母。\r\n返回结果：String\r\n调用样例:\r\n```javascript\r\nvar src = \" hello world \";\r\nconsole.log(\"'\",src,\"',  length:\",src.length);\r\nvar dsrc = fromq.utils.initialsToUpperCase(src);\r\nconsole.log(\"'\",dsrc,\"',  length:\",dsrc.length);\r\n/*out:\r\n' hello world ', length:13\r\n' Hello World ', length:13\r\n*/\r\n```\r\n#### isArray\r\n调用格式：`isArray(/*array*/it);`\r\n功能描述：判断it是否是数组。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nconsole.log(fromq.utils.isArray([]));  //true\r\n```\r\n#### isFunction\r\n调用格式：`isFunction(/*Function*/it);`\r\n功能描述：判断it是否是函数。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nconsole.log(fromq.utils.isFunction(function(){}));  //true\r\n```\r\n#### isString\r\n调用格式：`isString(/*String*/it);`\r\n功能描述：判断it是否是字符串。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nconsole.log(fromq.utils.isString(\" ab \"));  //true\r\nconsole.log(fromq.utils.isString(\"\"));  //true\r\n```\r\n#### isNumber\r\n调用格式：`isNumber(/*String|Number*/it);`\r\n功能描述：判断it是否是整数。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nconsole.log(fromq.utils.isNumber(\"123\"));  //true\r\nconsole.log(fromq.utils.isNumber(123));  //true\r\nconsole.log(fromq.utils.isNumber(\"12.3\"));  //false\r\nconsole.log(fromq.utils.isNumber(12.3));  //false\r\n```\r\n#### isFloat\r\n调用格式：`isFloat(/*String|Number*/it);`\r\n功能描述：判断it是否是实数。\r\n返回结果：true|false\r\n调用样例:\r\n```javascript\r\nconsole.log(fromq.utils.isFloat(\"123\"));  //true\r\nconsole.log(fromq.utils.isFloat(12.3));  //true\r\nconsole.log(fromq.utils.isFloat(\"-12.3\"));  //true\r\nconsole.log(fromq.utils.isFloat(\"+12.3\"));  //true\r\n```\r\n---","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}